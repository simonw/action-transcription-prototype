on:
  issues:
    types: [opened]

jobs:
  issue_created:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - uses: actions/github-script@v6
        with:
          script: |
            const child_process = require('child_process');
            const body = context.payload.issue.body;
            const match = body.match(/https?:\/\/[^\s]+/);
            if (!match) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'ðŸš« No URL found in issue body.'
              });
              // Close the issue
              github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed'
              });
              return;
            }
            const url = match[0];
            // Create directory named after the issue number
            const number = context.issue.number.toString();
            child_process.spawnSync('mkdir', ['-p', number]);
            // Create subdirectories subs, auto, whisper
            child_process.spawnSync('mkdir', ['-p', `${number}/subs`]);
            child_process.spawnSync('mkdir', ['-p', `${number}/auto`]);
            child_process.spawnSync('mkdir', ['-p', `${number}/whisper`]);
            let results = [];

            function run(command, args, cwd) {
              // Returns [statu,s stdout, stderr]
              const options = {
                cwd: cwd,
                encoding: 'utf-8',
              };
              const result = child_process.spawnSync(command, args, options);
              return [result.status, result.stdout, result.stderr];
            }

            results.push(run('yt-dlp', ['--all-subs', '--skip-download', url], `${number}/subs`));
            // Did that create any files?
            const files = child_process.spawnSync('ls', [`${number}/subs`]);
            if (files.stdout.toString().trim() === '') {
              // Use --write-auto-sub
              results.push(run('yt-dlp', ['--write-auto-sub', '--skip-download', url], `${number}/auto`));
            }
            // If still no files, push them through Whisper
            const files2 = child_process.spawnSync('ls', [`${number}/subs`]);
            if (files2.stdout.toString().trim() === '') {
              console.log("TODO: Whisper");
            }
            const comment = results.map(result => {
              return `\`\`\` + ${result[0]}\n${result[1]}\n${result[2]}\`\`\``;
            }).join('\n');
            // Post the output as a comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
            // Close the issue
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
      - name: Show generated files
        run: |-
          pwd
          find .
